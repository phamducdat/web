swagger: '2.0'
info:
  description: The document of MiniBlogs
  version: 1.0.0
  title: MiniBlogs REST APIs
  contact:
    name: Dat Pham
    email: phamducdat2402@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: 'localhost:8080'
basePath: /miniblogs/backend/v1

paths:
  /login/admin:
    get:
      tags:
        - Login
      summary: Login admin
      operationId: loginAdmin
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: adminLogin
          required: true
          schema:
            $ref: "#/definitions/AdminLogin"
      responses:
        200:
          $ref: '#/responses/Admin'
        401:
          $ref: '#/responses/NoAuthorized'
        403:
          $ref: '#/responses/Forbidden'
  /login/author:
    get:
      tags:
        - Login
      summary: Login author
      operationId: loginAuthor
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: authorLogin
          required: true
          schema:
            $ref: "#/definitions/AuthorLogin"
      responses:
        200:
          $ref: '#/responses/Author'
        401:
          $ref: '#/responses/NoAuthorized'
        403:
          $ref: '#/responses/Forbidden'

  /admin:
    get:
      tags:
        - Admins
      summary: Get Admin
      operationId: getAdmin
      produces:
        - application/json
      responses:
        200:
          $ref: '#/responses/Admin'
        401:
          $ref: '#/responses/NoAuthorized'
        403:
          $ref: '#/responses/Forbidden'
        404:
          $ref: '#/responses/NotFound'
  /authors:
    get:
      tags:
        - Authors
      summary: Get All Author
      operationId: getAllAuthor
      produces:
        - application/json
      responses:
        200:
          $ref: '#/responses/AuthorList'
        401:
          $ref: '#/responses/NoAuthorized'
        403:
          $ref: '#/responses/Forbidden'
        404:
          $ref: '#/responses/NotFound'
    post:
      tags:
        - Authors
      summary: Create New Author
      operationId: createAuthor
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: authorRequest
          description: The Author To Create
          required: true
          schema:
            $ref: "#/definitions/AuthorRequest"
      responses:
        200:
          $ref: '#/responses/Author'
        401:
          $ref: '#/responses/NoAuthorized'
        403:
          $ref: '#/responses/Forbidden'
        404:
          $ref: '#/responses/NotFound'
  /authors/{authorId}:
    parameters:
      - name: authorId
        in: path
        description: The Id Of Author
        required: true
        type: string
    get:
      tags:
        - Authors
      summary: Get Author By Id
      operationId: getAuthorById
      produces:
        - application/json
      responses:
        200:
          $ref: '#/responses/Author'
        401:
          $ref: '#/responses/NoAuthorized'
        403:
          $ref: '#/responses/Forbidden'
        404:
          $ref: '#/responses/NotFound'

  /authors/{authorId}/blogs:
    parameters:
      - name: authorId
        in: path
        description: The Id Of Author
        required: true
        type: string
    get:
      tags:
        - Blogs
      summary: Get All Blog Of Author
      operationId: getAllBlogByAuthor
      produces:
        - application/json
      responses:
        200:
          $ref: '#/responses/BlogList'
        401:
          $ref: '#/responses/NoAuthorized'
        403:
          $ref: '#/responses/Forbidden'
        404:
          $ref: '#/responses/NotFound'


  /blogs:
    get:
      tags:
        - Blogs
      summary: Get All Blog
      operationId: getAllBlog
      produces:
        - application/json
      responses:
        200:
          $ref: '#/responses/BlogList'
        401:
          $ref: '#/responses/NoAuthorized'
        403:
          $ref: '#/responses/Forbidden'
        404:
          $ref: '#/responses/NotFound'
    post:
      tags:
        - Blogs
      summary: Create The New Blog
      operationId: CreateBlog
      consumes:
        - application/json
      produces:
        - application/json

      parameters:
        - in: body
          name: blogRequest
          required: true
          schema:
            $ref: "#/definitions/BlogRequest"
      responses:
        200:
          $ref: '#/responses/Blog'
        401:
          $ref: '#/responses/NoAuthorized'
        403:
          $ref: '#/responses/Forbidden'
        404:
          $ref: '#/responses/NotFound'

  /blogs/{blogId}:
    parameters:
      - name: blogId
        in: path
        description: Blog Id
        required: true
        type: string
    get:
      tags:
        - Blogs
      summary: Get Blog By Id
      operationId: getBlogById
      produces:
        - application/json
      responses:
        200:
          $ref: '#/responses/Blog'
        401:
          $ref: '#/responses/NoAuthorized'
        403:
          $ref: '#/responses/Forbidden'
        404:
          $ref: '#/responses/NotFound'


  /contacts:
    get:
      tags:
        - Contacts
      summary: Get All Contact
      operationId: getAllContact
      produces:
        - application/json
      responses:
        200:
          $ref: '#/responses/ContactList'
        401:
          $ref: '#/responses/NoAuthorized'
        403:
          $ref: '#/responses/Forbidden'
        404:
          $ref: '#/responses/NotFound'
    post:
      tags:
        - Contacts
      summary: Create The New Contact
      operationId: createContact
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: contactRequest
          required: true
          schema:
            $ref: "#/definitions/ContactRequest"
      responses:
        200:
          $ref: '#/responses/OK'
        401:
          $ref: '#/responses/NoAuthorized'
        403:
          $ref: '#/responses/Forbidden'
        404:
          $ref: '#/responses/NotFound'
  /authors/{authorId}/contacts:
    parameters:
      - name: authorId
        in: path
        description: Author Id
        required: true
        type: string
    get:
      tags:
        - Contacts
      summary: Get All Contact By Author
      operationId: getAllContactByAuthor
      produces:
        - application/json
      responses:
        200:
          $ref: '#/responses/ContactList'
        401:
          $ref: '#/responses/NoAuthorized'
        403:
          $ref: '#/responses/Forbidden'
        404:
          $ref: '#/responses/NotFound'



definitions:

  Admin:
    type: object
    properties:
      adminId:
        type: string
        example: 030e5438-4d9e-4d41-aa68-ac04b05b7c3f

      adminName:
        type: string
        example: Dat Pham

      adminEmail:
        type: string
        example: phamducdat2402@gmail.com

      adminPassword:
        type: string
        example: 123456
  AdminLogin:
    type: object
    properties:
      adminEmail:
        type: string
        example: test@gmail.com
      adminPassword:
        type: string
        example: 123

  Author:
    type: object
    properties:
      authorId:
        type: string
        example: 030e5438-4d9e-4d41-aa68-ac04b05b7c3f

      authorName:
        type: string
        example: Dat Pham

      authorEmail:
        type: string
        example: phamducdat2402@gmail.com

      authorDescription:
        type: string
        example: I am Dat Pham

      authorAvatar:
        type: string
        example: pictures/avatar

      authorPassword:
        type: string
        example: 123456

      adminId:
        type: string
        example: 1234
  AuthorLogin:
    type: object
    properties:
      authorEmail:
        type: string
        example: test@gmail.com
      authorPassword:
        type: string
        example: 123

  AuthorList:
    type: array
    items:
      $ref: "#/definitions/Author"

  AuthorRequest:
    type: object
    properties:

      authorName:
        type: string
        example: Dat Pham

      authorEmail:
        type: string
        example: phamducdat2402@gmail.com

      authorDescription:
        type: string
        example: I am Dat Pham

      authorAvatar:
        type: string
        example: pictures/avatar

      authorPassword:
        type: string
        example: 123456

      adminId:
        type: string
        example: 1234
  Blog:
    type: object
    properties:

      blogId:
        type: string
        example: 030e5438-4d9e-4d41-aa68-ac04b05b7c3d

      authorId:
        type: string
        example: 030e5438-4d9e-4d41-aa68-ac04b05b7c3f

      blogName:
        type: string
        example: Learn CSS

      blogIntroduction:
        type: string
        example: Build Responsive Real-World Websites with HTML and CSS

      blogContent:
        type: string
        example: Learn modern HTML5, CSS3 and web design by building a stunning website for your portfolio! Includes flexbox and CSS Grid
      blogPicture:
        type: string
        example: picture/css-picture

      blogType:
        type: string
        example: Web

      blogDate:
        type: string


  BlogList:
    type: array
    items:
      $ref: "#/definitions/Blog"

  BlogRequest:
    type: object
    properties:
      authorId:
        type: string
        example: 030e5438-4d9e-4d41-aa68-ac04b05b7c3f

      blogName:
        type: string
        example: Learn CSS

      blogIntroduction:
        type: string
        example: Build Responsive Real-World Websites with HTML and CSS

      blogContent:
        type: string
        example: Learn modern HTML5, CSS3 and web design by building a stunning website for your portfolio! Includes flexbox and CSS Grid

      blogPicture:
        type: string
        example: picture/css-picture

      blogType:
        type: string
        example: Web

      blogDate:
        type: string


  Contact:
    type: object
    properties:

      contactId:
        type: string
        example: 030e5438-4d9e-4d41-aa68-ac04b05b7c3a

      authorId:
        type: string
        example: 030e5438-4d9e-4d41-aa68-ac04b05b7c3f

      contactEmailFrom:
        type: string
        format: email
        example: from@gmail.com

      contactName:
        type: string
        example: PhamDuc

      contactMessage:
        type: string
        example: How you do that

  ContactList:
    type: array
    items:
      $ref: "#/definitions/Contact"

  ContactRequest:
    type: object
    properties:

      authorId:
        type: string
        example: 030e5438-4d9e-4d41-aa68-ac04b05b7c3f


      contactEmailFrom:
        type: string
        format: email
        example: from@gmail.com

      contactName:
        type: string
        example: PhamDuc

      contactMessage:
        type: string
        example: How you do that

responses:

  Admin:
    description: "Admin response"
    schema:
      $ref: "#/definitions/Admin"
  Author:
    description: "Author response"
    schema:
      $ref: "#/definitions/Author"
  AuthorList:
    description: "List Author response"
    schema:
      $ref: "#/definitions/AuthorList"
  Blog:
    description: "Blog response"
    schema:
      $ref: "#/definitions/Blog"
  BlogList:
    description: "BlogList response"
    schema:
      $ref: "#/definitions/BlogList"
  Contact:
    description: "Contact response"
    schema:
      $ref: "#/definitions/Contact"
  ContactList:
    description: "ContactList response"
    schema:
      $ref: "#/definitions/ContactList"
  OK:
    description: '200: OK'
  Created:
    description: '201: Created'
  Accepted:
    description: '202: Accepted'
  NoContent:
    description: '204: NoContent'
  BadRequest:
    description: '400: Bad Request'
  NoAuthorized:
    description: '401: No Authorized'
  Forbidden:
    description: '403: Forbidden'
  NotFound:
    description: '404: Not Found'
  InternalServerError:
    description: '500: Internal Server Error'



